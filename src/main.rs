use std::{    fs,    io::{prelude::*, BufReader},    net::{TcpListener, TcpStream},    {thread, time}};fn main() {    let listener = TcpListener::bind("127.0.0.1:7878").unwrap();    for stream in listener.incoming() {        let stream = stream.unwrap();        handle_connection(stream);    }}fn handle_connection(mut stream: TcpStream) {    let buf_reader = BufReader::new(&mut stream);    let http_request = buf_reader.lines().next().unwrap().unwrap();    let (status_line, file_name): (&str, &str) =        match http_request.as_str() {            "GET / HTTP/1.1" =>  ("HTTP/1.1 200 OK\r\n\r\n", "hello.html"),            "GET /sleep HTTP/1.1" => {                thread::sleep(time::Duration::from_secs(5));                ("HTTP/1.1 200 OK", "hello.html")            },            _ => {("HTTP/1.1 404 NOT FOUND \r\n\r\n", "404.html")},        };    let contents = fs::read_to_string(file_name).unwrap();    let length = contents.len();    let response = format!("{status_line}\r\nContent-Length: {length}\r\n\r\n{contents}");    stream.write_all(response.as_bytes()).unwrap();}